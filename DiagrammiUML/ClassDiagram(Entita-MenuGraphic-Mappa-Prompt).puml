@startuml
package "Entita'" #DDDDDD{ /'ADT tutti tipi di entità '/
enum MType{
  MOSTRO_MARINO
  COBOLDO
  BOSS_DRAGO
  ARMATURA
  MAGO_OSCURO
}

abstract class Entity{
  String name;
  String history;
  short health;
  short maxHealth;
  byte attack;
  byte armor;
  byte level;

  /'---------- METODI ENTITY ----------'/
  byte getLv();
  byte getLife();
  byte getMaxLife();
  String getHistory();
  String getName();
  byte getAttack();
  byte getArmor();
  short changeHealth(short value);
  abstract void setLv(byte l);

  protected void safeIncrementHealth(short amount);
  protected void safeIncrementDamage(byte amount);
  protected void safeIncrementArmor(byte amount);
  protected void safeDecrementHealth(short amount);
  protected void safeDecrementDamage(byte amount);
  protected void safeDecrementArmor(byte amount);
} 



class Player{
  private PropertyChangeSupport observerHandler;
  Inventario inv;
  final byte MAX_INVENTORY_WEIGHT = 10
  final byte BASE_ATTACK= 1
  final byte BASE_ARMOR = 1
  final byte BASE_HEALTH = 5
  final byte BASE_LEVEL = 1
  final byte HEALTH_MULTIPLIER = 2
  final byte DAMAGE_MULTIPLIER = 1
  final byte ARMOR_MULTIPLIER = 1
  final String story = ""

  /'---------- COSTRUTTORI ----------'/
  Player(String name);
  /'---------- METODI PLAYER ----------'/
  void addObserver(PropertyChangeListener listener);
  void removeObserver(PropertyChangeListener listener);
  void setLv(byte l);
  boolean doesFillInv(ItemStack i);
  boolean removeItem(ItemStack i);
  boolean addItem(ItemStack i);
  Inventario getInv();
  String showInv();
}

abstract class Monster{
  private MType type
  private final byte HEALTH_MULTIPLIER = 2
  private final byte DAMAGE_MULTIPLIER = 1
  private final byte ARMOR_MULTIPLIER = 1

  /'---------- COSTRUTTORI ----------'/
  Monster(MType t, short baseHealth, byte baseDamage, byte baseArmor, byte baseLv , byte healthMul, byte damageMul, byte armorMul);
  Monster(MType t, String name, short baseHealth, byte baseAttack, byte baseArmor, byte baseLv, byte healthMul, byte damageMul, byte armorMul);
  /'---------- METODI MONSTER ----------'/
  void propertyChange(PropertyChangeEvent event);
  private String selectName(MType t);
  MType getType();
  void setLv(byte l);
}
class MonsterFactory{
  /'---------- METODI MONSTER_FACTORY ----------'/
  Monster create(MType type);
  Monster create(MType t, String name);
  Monster create(MType t, String name, short health, byte damage, byte armor);
  Monster createRandom();
}

class xmlReader{
  /'---------- COSTRUTTORI ----------'/
  xmlReader(String fileName)

  /'---------- METODI----------'/
  Vector<MonsterValues> getMonsterValues();
  private MonsterValues getValuesFrom(Element eAttribute);
  private MType getMTypeBy(String name);
}

struct MonsterValues{
  short health, maxHealth;
  byte damage, armor, level;
  byte healthMul, armorMul, damageMul;
}


class Armatura{
  final String story="";

  /'---------- COSTRUTTORI ----------'/
  Armatura();
  Armatura(String name);
  Armatura(String name, short health, byte damage, byte armor);
}
class MagoNero{
  final String story="";

  /'---------- COSTRUTTORI ----------'/
  MagoNero();
  MagoNero(String name);
  MagoNero(String name, short health, byte damage, byte armor);
}
class MostroMarino{
  final String story="";

  /'---------- COSTRUTTORI ----------'/
  MostroMarino();
  MostroMarino(String name);
  MostroMarino(String name, short health, byte damage, byte armor);
}
class Coboldo{
  final String story="";

  /'---------- COSTRUTTORI ----------'/
  Coboldo();
  Coboldo(String name);
  Coboldo(String name, short health, byte damage, byte armor);

}
class BossDrago{
  final String story="";

  /'---------- COSTRUTTORI ----------'/
  BossDrago();
  BossDrago(String name);
  BossDrago(String name, short health, byte damage, byte armor);
}

}
Monster -> MType
Player --|>Entity
Monster --|>Entity
Armatura--|> Monster
MagoNero --|> Monster
MostroMarino --|> Monster
Coboldo--|> Monster
BossDrago--|> Monster

MonsterFactory --> BossDrago
MonsterFactory --> MagoNero 
MonsterFactory --> Coboldo
MonsterFactory --> Armatura
MonsterFactory --> MostroMarino 
MonsterFactory -> xmlReader
xmlReader -> MonsterValues


/'sta nel kernel layer'/
package Menu_package #DDDDDD{

abstract class Menu{
  /'La prima stringa e il comando mentre la seconda è la descrizione'/
  protected HashMap<MenuValues, Command> commandMap;
  final String thisDir;

  public Command checkInTheMap(String cmmdName);
  String toString();
}
class StartMenu
{
 StartMenu(GameEngine generateMethods, GraphicAdapter gra);
 private loadMethod(String,Command);
}
class BattleMenu
{
 BattleMenu(GameEngine generateMethods, GraphicAdapter gra);
 private loadMethod(String,Command);
}
class MovementMenu
{
 MovementMenu(GameEngine generateMethods, GraphicAdapter gra);
 private loadMethod(String,Command);
}
struct MenuValues
{
 public String cmmdName;
 public String cmmdDescription;

 hashCode();
 toString();
 equals(Object);
}

}
note right of Menu :"Specificare i singoli comnadi nelle implementazioni dei menù"
BattleMenu--|> Menu
StartMenu--|> Menu
MovementMenu --|> Menu
Menu --|> MenuValues


package Mappa #DDDDDD{   

class LoaderMap{
  /'---------- COSTRUTTORI ----------'/
  LoaderMap(String file);

  /'---------- METODI----------'/
  Graph<Node, edge> getMap();
} 
    
class Coordinates{
  int x,y;
  
  /'---------- COSTRUTTORI ----------'/
  Coordinates(int x, int y);

  /'---------- METODI----------'/
  int getX();
  int getY();
  int setX(int x);
  int setY(int y);

}

class MapGraph
{
private SimpleDirectedWeightedGraph<NODE, DefaultWeightedEdge> map;
Coordinates[] directions;
static ArrayList<NODE> nodes;
static ArrayList<Stanza> chambers; //TODO: Attenzione che lo ho messo statico 
ArrayList<Coordinates> playerRoute; 
Coordinates PlayerPosition; 

static String getPathImage(Coordinates of){}
static Coordinates getPlayerPositionOf(){}
private Chest getRandomChest(){}
Coordinates getPlayerPos(){}
void setFreeRoomAt(Coordinates c){}
void movePlayerTo(Direction dir){}
public ArrayList<Direction> validDirectionOf(Coordinates n){}
public ArrayList<Monster> getAllMonster(){}
public boolean isValidDirectionTo(Coordinates c, Direction dir){}
public Monster getMonsterAt(Coordinates cord){}
public Chest getChestAt(Coordinates cord){}
public static boolean isStanza(Coordinates coord){}
}
note left of MapGraph :"Classe di facade"

enum  Direction{
  NORD
  WEST
  OVEST
  SOUTH
}

class node{
  Coordinates cord;
  Direction[] dir;
  
  /'---------- COSTRUTTORI ----------'/
  node(Direction[] dir);

  /'---------- METODI ----------'/
  setDirection(Direction[] d);
  addDirection(Direction d);
  Direction[] getDirection();

}

class Room{
  Coordinates cord;
  Monster monster;
  Chest chest;
  
  /'---------- COSTRUTTORI ----------'/
  Room(int x, int y);

  /'---------- METODI ----------'/
  Coordinates getCord();
  Monster getMonster();
  Chest getChest();
  }

} 


MapGraph --> Room
MapGraph --> node
MapGraph -> LoaderMap
node --> Coordinates
node --> Direction
Room --> Coordinates


package Prompts #DDDDDD{
/'Questa class è un Singleton: tutto entra ed esce da qua'/

enum BackStateGame
{
 START
 QUIT
 UPDATE
 UPDATE_STORAGE
 UPDATE_ENTITY
 MOVE
 COMBACT
 SAVE
}

class Promt{

    Menu mn;
    GameEngine gme;
    Command cmmd;

    GameFrame gmf;
    GraphicAdapter graphA;
  
  /'----------- COSTRUTTORI -----------'/
  Prompt(GameEngine);
  /'----------- METODI PROMPT -----------'/
  private void changeCommand(String);
  BackStateGame_Enum waitInput();
  public static void updateEntityBars(GameEngine gme, GraphicAdapter graphA);
  private static Vector<String> removeDoubleSpaces(String str);
  private void chooseUpdate(BackStateGame_Enum state);
  private void changeMenu(Menu mn);
  private void changeCommand(String input);
}

class Start{
  execute();
}
class Exit{
  execute();
}
class Look{
  execute();
}
class Attack{
  execute();
}
class Move{
  execute();
}
class Move{
  execute();
}
class TakeFromChest{
  execute();
}
class PlayerUse{
  execute();
}
class RemoveItem{
  execute();
}
class RemoveStackItem{
  execute();
}
class Load{
  execute();
}

interface Command{
  execute();
}

}
Start --|> Command
Exit --|> Command
Look --|> Command
Attack --|> Command
Move --|> Command
PlayerUse --|> Command
RemoveItem --|> Command
RemoveStackItem --|> Command
Load --|> Command
Promt --|> Command
TakeFromChest --|> Command

Menu --> Command

@enduml
